#Search in Rotated Sorted Array
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if (nums[mid] == target):
                return mid

            if nums[left] <= nums[mid]:
                if nums[left] <= target and target <= nums[mid]:            
                    right = mid - 1                   
                else:                
                    left = mid + 1
            else:
                if nums[mid] <= target and target <= nums[right]:                   
                    left = mid + 1                   
                else:                   
                    right = mid - 1                   
        return -1

# Thoughts:
# This problem is cool. One side of the mid will be sorted and another unsorted.
# if sorted part is left, 
#   check again for nums[left] <= target and target <= nums[mid] then
#     right = mid - 1
#   else(inside if)
#     left = mid + 1
# else,
#   check again for nums[mid] <= target and target <= nums[right]
#     left = mid + 1
#   else(inside if)
#     right = mid - 1
# return -1 (as the target is not present)

