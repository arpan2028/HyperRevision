class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        def helper(nums):
            n = len(nums)

            if n == 0:
                return 0

            if n == 1:
                return nums[0]

            dp = [0] * (n + 1)
            dp[0] = 0
            dp[1] = nums[0]

            for i in range(2, n + 1):
                dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])
            return dp[n]

        if len(nums) == 1:
            return nums[0]

        return max(helper(nums[1:]), helper(nums[:-1]))
#Tabulation


class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        def rob_linear(nums):
            memo = {}
            n = len(nums)

            def rob_from(i):
                if i < 0:
                    return 0
                
                if i == 0:
                    return nums[0]

                if i in memo:
                    return memo[i]

                memo[i] = max(rob_from(i - 1), rob_from(i - 2) + nums[i])

                return memo[i]

            return rob_from(n - 1)

        n = len(nums)
        if n == 1:
            return nums[0]

        case1 = rob_linear(nums[:-1])
        case2 = rob_linear(nums[1:])

        return max(case1, case2)
#Memoization




                    

                
       


              
