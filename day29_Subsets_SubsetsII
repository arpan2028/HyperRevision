Subsets
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []

        def backtrack(i, current):
            if i == len(nums):
                res.append(current[:])
                return
            
            current.append(nums[i])
            backtrack(i + 1, current)

            current.pop()

            backtrack(i + 1, current)
        
        backtrack(0, [])
        return res

"""
Thoughts:
I feel stupid that i haven't done this problem yet. This helps you understand recursion and backtracking really well.
TC - (n * 2^n)
SC - (n * 2^n) including output 
"""



Subsets II
class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        nums.sort()
        n = len(nums)

        def backtrack(i, current):
            if i == len(nums):
                res.append(current[:])
                return
            
            current.append(nums[i])
            backtrack(i + 1, current)

            current.pop()

            idx = i + 1
            while (idx < n and nums[idx] == nums[idx - 1]):
                idx += 1
            backtrack(idx, current)

        
        backtrack(0, [])
        return res
"""
Thoughts:
Add three lines in Subsets and you are good
TC - (n * 2^n) practically, little bit less as we skip duplicates
SC - (n * 2^n) including output 
"""
