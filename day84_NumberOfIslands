class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        ROWS, COLS = len(grid), len(grid[0])
        count = 0
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def bfs(row, col):
            q = deque()
            q.append((row, col))
            grid[row][col] = "0"

            while q:
                row, col = q.popleft()
                for dr, dc in directions:
                    nrow, ncol = row + dr, col + dc
                    if(nrow >= 0 and nrow < ROWS and ncol >= 0 and ncol < COLS and grid[nrow][ncol] == "1"):
                        grid[nrow][ncol] = "0"
                        q.append((nrow, ncol))


        for row in range(ROWS):
            for col in range(COLS):
                if grid[row][col] == "1":
                    bfs(row, col)
                    count += 1
        return count
# TC - O(m * n) m is the no. of rows, n is the no. of cols
# SC - O(m * n)
        



        
