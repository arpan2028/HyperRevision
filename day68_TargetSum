
#TLE Solution
class Solution(object):
    def findTargetSumWays(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        def backtrack(i, total):
            if i == len(nums):
                return 1 if total == target else 0

            return (backtrack(i + 1, total + nums[i]) +
                    backtrack(i + 1, total - nums[i]))
        return backtrack(0, 0)



#Memoization Solution
class Solution(object):
    def findTargetSumWays(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        dp = {}

        def backtrack(i, total):
            if i == len(nums):
                return 1 if total == target else 0

            if (i, total) in dp:
                return dp[(i, total)]

            dp[(i, total)]= (backtrack(i + 1, total + nums[i]) +
                    backtrack(i + 1, total - nums[i]))

            return dp[(i, total)]
                    
        return backtrack(0, 0)

# TC - O(n * m) where, n is the length of nums and m is the sum of all elements
# SC - O(n * m)
