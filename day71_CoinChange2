class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        n = len(coins)
        memo = [[-1] * (amount + 1) for _ in range(n + 1)]
       
        def dfs(i, a):
            if a == 0:
                return 1
                
            if i >= n:
                return 0
            
            if memo[i][a] != -1:
                return memo[i][a]

            #always compute not take first
            not_take = dfs(i + 1, a)
            take = 0

            if a >= coins[i]:
                take = dfs(i, a - coins[i])

            res = take + not_take
            
            memo[i][a] = res
            return res
        return dfs(0, amount)

# TC - O(n * amount)
# SC - O(n * amount)
