#Longest Substring without Repeating characters
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        visited = set()
        left = max_len = 0

        for right in range(len(s)):
            while s[right] in visited:
                visited.remove(s[left])
                left += 1
            visited.add(s[right])
            max_len = max(max_len, right - left + 1)
        return max_len

# TC - O(n)
# SC - O(m) - m is the no. of unique characters


#Longest Repeating Character Replacement
from collections import defaultdict
class Solution:
    def characterReplacement(self, s, k):
        freq = defaultdict(int)
        max_len, max_count, left = 0, 0, 0
        for right in range(len(s)):
            freq[s[right]] += 1
            max_count = max(max_count, freq[s[right]])
            while (right - left + 1) - max_count > k:
                freq[s[left]] -= 1
                left += 1
            max_len = max(max_len, right - left + 1)
        return max_len


#   TC - O(n)
#   SC - O(m), m is the number of unique characters.
