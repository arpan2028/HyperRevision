1. Implement Trie
class Trie:
    def __init__(self):
        self.children = {}
        self.word = False 

    def insert(self, word):
        root = self
        for char in word:
            if char not in root.children:
                root.children[char] = Trie()
            root = root.children[char]
        root.word = True
            

    def search(self, word):
        root = self
        for char in word:
            if char not in root.children:
                return False
            root = root.children[char]
        return root.word

    def startsWith(self, prefix):
        root = self
        for char in prefix:
            if char not in root.children:
                return False
            root = root.children[char]
        return True


2. Design Add and Search Words Data Structure.
class TrieNode:
    def __init__(self):
        self.children = {}
        self.word = False

class WordDictionary(object):
    def __init__(self):
        self.root = TrieNode()
       
    def addWord(self, word):
        """
        :type word: str
        :rtype: None
        """
        curr = self.root
        for char in word:
            if char not in curr.children:
                curr.children[char] = TrieNode()
            curr = curr.children[char]
        curr.word = True



    def search(self, word):
        """
        :type word: str
        :rtype: bool
        """
        def dfs(i, root):
            if i == len(word):
                return root.word

            if word[i] == ".":
                for letter in root.children.values():
                    if dfs(i + 1, letter):
                        return True
                return False
            else:
                if word[i] not in root.children:
                    return False
                return dfs(i + 1, root.children[word[i]])
        return dfs(0, self.root)


      

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
