"""Thoughts:
    The solution for Problem 1 is o(n2). I might do the optimal one tomorrow.
    and Another problem for tomorrow is Binary Tree Maximum Path sum.
"""


#Construct Binary Tree from Preorder and Inorder Traversal
# class TreeNode:
#     def __init__(self, val: int):
#         self.val = val
#         self.left: Optional['TreeNode'] = None
#         self.right: Optional['TreeNode'] = None

class Solution:
    def buildTree(self, preorder, inorder):
        if not preorder or not inorder:
            return None
        
        root = TreeNode(preorder[0])
        mid = inorder.index(preorder[0])

        root.left = self.buildTree(preorder[1 : mid + 1], inorder[:mid] )
        root.right = self.buildTree(preorder[mid + 1 : ], inorder[mid + 1:])

        return root
       
#PathSum
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def hasPathSum(self, root, targetSum):
        """
        :type root: Optional[TreeNode]
        :type targetSum: int
        :rtype: bool
        """
        def dfs(node, curSum):
            if not node:
                return False

            curSum += node.val

            if not node.left and not node.right:
                return curSum == targetSum

            return (dfs(node.left, curSum) or dfs(node.right, curSum))
        return dfs(root, 0)    

#PathSum II
# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def pathSum(self, root, targetSum):
        """
        :type root: Optional[TreeNode]
        :type targetSum: int
        :rtype: List[List[int]]
        """
        groupofres = []
        res = []
        def dfs(node, currentSum, res):
            if not node:
                return 0
            currentSum += node.val
            res.append(node.val)

            if not node.left and not node.right:
                if currentSum == targetSum:
                    groupofres.append(list(res))

            dfs(node.left, currentSum, res)
            dfs(node.right, currentSum, res)
            res.pop()

        dfs(root ,0, [])
        return groupofres


  
